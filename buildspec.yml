version: 0.2

phases:
  install:
    runtime-versions:
      java: corretto17
    commands:
      - echo Installing Docker...
      - nohup /usr/local/bin/dockerd-entrypoint.sh &>/tmp/dockerd.log &
      - timeout 15 sh -c "until docker info; do echo .; sleep 1; done"
      - echo Docker is ready.

      - echo Installing kubectl...
      - curl -LO "https://dl.k8s.io/release/v1.29.1/bin/linux/amd64/kubectl"
      - chmod +x kubectl
      - mv kubectl /usr/local/bin/
      - kubectl version --client

      - echo Installing aws-iam-authenticator...
      - curl -o aws-iam-authenticator https://amazon-eks.s3.us-east-1.amazonaws.com/1.29.0/2024-05-31/bin/linux/amd64/aws-iam-authenticator
      - chmod +x aws-iam-authenticator
      - mv aws-iam-authenticator /usr/local/bin/aws-iam-authenticator

      - echo Logging into Amazon ECR...
      - aws ecr get-login-password --region us-east-1 | docker login --username AWS --password-stdin 047719652562.dkr.ecr.us-east-1.amazonaws.com

      - echo Configuring kubeconfig for EKS...
      - aws eks update-kubeconfig --region us-east-1 --name Capstone-cluster

  pre_build:
    commands:
      - echo Build started on `date`
      - echo Compiling the application...
      - mvn clean package -DskipTests

  build:
    commands:
      - echo Building Docker image...
      - docker build -t capstone_ecr .
      - docker tag capstone_ecr:latest 047719652562.dkr.ecr.us-east-1.amazonaws.com/capstone_ecr:latest

      - echo Pushing Docker image to Amazon ECR...
      - docker push 047719652562.dkr.ecr.us-east-1.amazonaws.com/capstone_ecr:latest

      - echo Copying Kubernetes manifest files...
      - mkdir -p k8s-out
      - cp kubernetes/*.yml k8s-out/ || true
      - cp kubernetes/*.yaml k8s-out/ || true
      - ls -l k8s-out

  post_build:
    commands:
      - echo Installing ArgoCD into EKS cluster...
      - kubectl create namespace argocd || true
      - kubectl apply -n argocd -f https://raw.githubusercontent.com/argoproj/argo-cd/stable/manifests/install.yaml

      - echo Waiting for ArgoCD server deployment to be ready...
      - kubectl rollout status deployment/argocd-server -n argocd --timeout=300s

      - echo Patching ArgoCD server service to NodePort...
      - kubectl patch svc argocd-server -n argocd -p '{"spec": {"type": "NodePort"}}'

      - echo "ArgoCD service status:"
      - kubectl get svc -n argocd


artifacts:
  base-directory: k8s-out
  files:
    - '**/*'
